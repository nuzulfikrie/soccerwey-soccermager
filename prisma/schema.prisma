generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  role             UserRole  @default(USER)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model League {
  id        String   @id @default(cuid())
  name      String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Team {
  id                      String           @id @default(cuid())
  name                    String
  logoUrl                 String?
  teamKitColor            String
  teamKitColorSecondary   String
  teamKitColorThird       String
  teamPantsColor          String
  teamPantsColorSecondary String
  teamPantsColorThird     String
  teamSocksColor          String
  teamSocksColorSecondary String
  teamSocksColorThird     String
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  leagueId                String?
  awayMatches             Match[]          @relation("AwayTeam")
  homeMatches             Match[]          @relation("HomeTeam")
  matchLineups            MatchLineup[]
  matchStatistics         MatchStatistic[]
  Player                  Player[]
  league                  League?          @relation(fields: [leagueId], references: [id])
}

model Player {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  jerseyNumber Int
  position     String
  dateOfBirth  DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  teamId       String
  matchLineups MatchLineup[]
  Team         Team          @relation(fields: [teamId], references: [id])

  @@index([teamId])
}

model Match {
  id         String           @id @default(cuid())
  matchDate  DateTime
  venue      String
  status     MatchStatus      @default(SCHEDULED)
  homeScore  Int              @default(0)
  awayScore  Int              @default(0)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  homeTeamId String
  awayTeamId String
  awayTeam   Team             @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam   Team             @relation("HomeTeam", fields: [homeTeamId], references: [id])
  lineups    MatchLineup[]
  statistics MatchStatistic[]

  @@index([matchDate])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

model MatchLineup {
  id        String   @id @default(cuid())
  position  String
  isStarter Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matchId   String
  teamId    String
  playerId  String
  match     Match    @relation(fields: [matchId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([matchId, playerId])
  @@index([matchId])
}

model MatchStatistic {
  id             String   @id @default(cuid())
  possession     Int      @default(0)
  shotsOnTarget  Int      @default(0)
  shotsOffTarget Int      @default(0)
  corners        Int      @default(0)
  fouls          Int      @default(0)
  yellowCards    Int      @default(0)
  redCards       Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  matchId        String
  teamId         String
  match          Match    @relation(fields: [matchId], references: [id])
  team           Team     @relation(fields: [teamId], references: [id])

  @@unique([matchId, teamId])
}

enum UserRole {
  USER
  ADMIN
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}
