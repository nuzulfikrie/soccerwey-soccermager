generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  role             UserRole  @default(USER)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  Team             Team[]

  @@index([emailVerified])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model League {
  id        String   @id @default(cuid())
  name      String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Team {
  id              String           @id @default(cuid())
  name            String
  logoUrl         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  leagueId        String?
  userId          String?
  Kit             Kit[]
  Lineup          Lineup[]
  awayMatches     Match[]          @relation("AwayTeam")
  homeMatches     Match[]          @relation("HomeTeam")
  matchLineups    MatchLineup[]
  matchStatistics MatchStatistic[]
  league          League?          @relation(fields: [leagueId], references: [id])
  User            User?            @relation(fields: [userId], references: [id])

  @@index([leagueId])
  @@index([userId])
}

model Player {
  id           String        @id @default(cuid())
  isSubstitute Boolean       @default(false)
  lineupId     String?
  name         String?
  number       Int?
  x            Float?
  y            Float?
  position     Position?
  matchLineups MatchLineup[]
  Lineup       Lineup?       @relation(fields: [lineupId], references: [id], onDelete: Cascade)

  @@index([lineupId])
}

model Match {
  id         String           @id @default(cuid())
  matchDate  DateTime
  venue      String
  status     MatchStatus      @default(SCHEDULED)
  homeScore  Int              @default(0)
  awayScore  Int              @default(0)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  homeTeamId String
  awayTeamId String
  awayTeam   Team             @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam   Team             @relation("HomeTeam", fields: [homeTeamId], references: [id])
  lineups    MatchLineup[]
  statistics MatchStatistic[]

  @@index([matchDate])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

model MatchLineup {
  id        String   @id @default(cuid())
  position  String
  isStarter Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matchId   String
  teamId    String
  playerId  String
  match     Match    @relation(fields: [matchId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([matchId, playerId])
  @@index([matchId])
}

model MatchStatistic {
  id             String   @id @default(cuid())
  possession     Int      @default(0)
  shotsOnTarget  Int      @default(0)
  shotsOffTarget Int      @default(0)
  corners        Int      @default(0)
  fouls          Int      @default(0)
  yellowCards    Int      @default(0)
  redCards       Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  matchId        String
  teamId         String
  match          Match    @relation(fields: [matchId], references: [id])
  team           Team     @relation(fields: [teamId], references: [id])

  @@unique([matchId, teamId])
}

model Kit {
  id        String   @id @default(cuid())
  type      KitType
  teamId    String
  jersey    String
  pants     String
  socks     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Lineup    Lineup[]

  @@unique([teamId, type])
  @@index([teamId])
}

model Lineup {
  id        String   @id @default(cuid())
  name      String
  teamId    String
  kitId     String
  formation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Kit       Kit      @relation(fields: [kitId], references: [id])
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Player    Player[]

  @@index([kitId])
  @@index([teamId])
}

enum UserRole {
  USER
  ADMIN
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum KitType {
  MAIN
  SECOND
  THIRD
}

enum Position {
  GK
  LB
  CB
  RB
  CDM
  CM
  CAM
  LW
  RW
  ST
}
